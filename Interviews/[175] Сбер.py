# Задача 1
# Известно, что в июле на сайте доставки горячих обедов конверсия из просмотра
# в заказ в дождливые дни составляла 50%, а в сухие 25%.
# Таким образом компания получила 3000 заказов.
# Также известно, что кол-во дождливых и сухих днеи было одинаково.
# Команда внедрила новую фичу на сайте, которая позволила увеличить конверсию
# просмотра в заказ в дождливые дни до 60%, а в сухие до 30%
# Спрогнозируйте число заказов в августе, при условии, что кол-во дождливых дней
# не поменяется. И кол-во просмотров тоже не поменяется


# Ответ 3600.
#
# Дождливые 1 = 50% ,Солнечные 1 = 25%, Всего заказов 3000. Веса одинаковые.
# Дождливые 2 = 60% ,Солнечные 2 = 30%, Всего заказов z. Веса одинаковые.
# 0.5x+0.25y = 3000  |*6
# 0.6x+0.3y = z  |*5
# домножим и вычтем —→ 18000 = 5z —> z = 3600
#
# Или
# 60% = 1.2 * 50%, 30% = 1.2 * 25% —>  0.6x+0.3y =1.2( 0.5x+0.25y ) = 1.2* 3000 = 3600.
# конверсия выросла на один и тот же мультипликатор 1.2 и в дождь, и в солнце,
# а объёмы просмотров x,y не менялись —> общие заказы тоже умножаются на 1.2.


# Задача 2
# на вход дана текстовая строка (aafmmmmmffaamak)
# напиши скрипт на питоне, который находит самую длиннию подстроку из повторяющихся символов
# и выводит в ответе символ и кол-во его повторений.

s = 'aafmmmmmffaamak'

def long_str(s: str):
    letter = s[0]
    curr_len = 1
    max_len = 1
    for i in range(1, len(s)):
        if s[i] == s[i-1]:
            curr_len += 1
            if curr_len > max_len:
                max_len = curr_len
                letter = s[i]
        else:
            curr_len = 1
    return letter+str(max_len)

print(long_str(s))  #m5



# Задача 3
# Есть две монеты. Настоящая (орел, решка) и фальшивая (орел, орел).
# Ты наугад вытаскиваешь 1 монету, подкидываешь ее и выпадает орел.
# Какова вероятность, что у тебя в руке фальшивая монета?"

# формула Байеса:
# событие А = фальшивая монета
# событие В = выпал орел
# Р(А|B) = P(B|A) * P(A) / P(B)
#
# P(A) = 1/2
# P(B) = 3/4
# P(B|A) = 1
# Р(А|B) = 2/3



# Задача4:
# Z-test - применяется, когда когда большие выборки, известна дисперсия, основан на нормальном распределении.
# Проверяет гипотезу о равенстве средних, пропорций или других параметров.
#
# T-test - когда малые выборки, неизвестная дисперсия, Основан на t-распределении Стьюдента
#
# Ratio-метрики (отношения) - метрики вида отношение двух случайных величин, когда отношения
# (CTR = Clicks / Impressions, CR = Orders / Visitors, ARPU = Revenue / Users),
# требуются специальные методы (бутстрэп, дельта-метод).
# У этих метрик  распределение не нормальное, и дисперсия не выражается просто, t-test/z-test могут давать некорректные результаты.



